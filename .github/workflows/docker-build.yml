name: Docker Build and Deploy

"on":
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: nox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f dev-requirements.txt ]; then
          pip install -r dev-requirements.txt
        else
          pip install pytest pytest-asyncio pytest-cov httpx
        fi
    
    - name: Initialize test database
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/nox_test"
        if [ -f scripts/init-db.sql ]; then
          psql $DATABASE_URL -f scripts/init-db.sql
        else
          echo "No init-db.sql found, skipping database initialization"
        fi
      env:
        PGPASSWORD: test_password
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nox_test
        JWT_SECRET_KEY: test_secret_key_for_ci
        NOX_API_HOST: "0.0.0.0"
        NOX_API_PORT: "8000"
        # Single-node database config for CI
        PG_PRIMARY_HOST: "localhost"
        PG_REPLICA1_HOST: "localhost" 
        PG_REPLICA2_HOST: "localhost"
        # Single Redis instance for CI
        REDIS_URL: "redis://localhost:6379/0"
        # Disable clustering in test environment
        DISABLE_MULTINODE: "true"
        CI_ENVIRONMENT: "true"
    
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (for image reference)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
    
    - name: Verify image exists and run security scan
      run: |
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"
        echo "Attempting to scan image: $IMAGE_REF"
        
        # Wait a bit for registry to index the image, then try with retries
        sleep 10
        
        MAX_RETRIES=3
        RETRY_DELAY=15
        
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i of $MAX_RETRIES: Checking if image exists..."
          
          if docker pull "$IMAGE_REF"; then
            echo "✅ Image found, proceeding with security scan"
            trivy image "$IMAGE_REF" --format sarif --output trivy-results.sarif --severity CRITICAL,HIGH --exit-code 0 || echo "Security scan completed with findings"
            exit 0
          else
            echo "❌ Attempt $i failed - image not found"
            if [ $i -lt $MAX_RETRIES ]; then
              echo "⏳ Waiting ${RETRY_DELAY}s before retry..."
              sleep $RETRY_DELAY
            fi
          fi
        done
        
        echo "🚫 Image not found after $MAX_RETRIES attempts, skipping security scan"
        echo "This may happen if the build job failed or image push was unsuccessful"
        # Create empty SARIF file to prevent upload step from failing
        echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"trivy"}},"results":[]}]}' > trivy-results.sarif
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
