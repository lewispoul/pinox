# Docker Compose - Production Configuration
# Nox API v7.0.0 with PostgreSQL, Redis, and monitoring

services:
  # ===== NOX API SERVICE =====
  nox-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: nox-api:v7.0.0
    container_name: nox-api-prod
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://noxuser:${POSTGRES_PASSWORD}@postgres:5432/noxdb
      
      # OAuth2 configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      
      # JWT configuration
      - JWT_SECRET=${JWT_SECRET}
      
      # API configuration
      - API_HOST=0.0.0.0
      - API_PORT=8082
      - ENVIRONMENT=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nox-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/v7/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== POSTGRESQL DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: nox-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=noxdb
      - POSTGRES_USER=noxuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - nox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U noxuser -d noxdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: nox-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nox-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ===== PROMETHEUS MONITORING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: nox-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - nox-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'

  # ===== GRAFANA DASHBOARDS =====
  grafana:
    image: grafana/grafana:latest
    container_name: nox-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - nox-network
    depends_on:
      - prometheus

  # ===== PINOX SERVICES =====
  web:
    build:
      context: ./web
      dockerfile: ../docker/Dockerfile.web
    env_file: .env
    ports: ["3000:3000"]
    depends_on: [gateway]

  gateway:
    build:
      context: ./services/gateway
      dockerfile: ../../docker/Dockerfile.gateway
    env_file: .env
    ports: ["8080:8080"]
    depends_on: [postgres, redis, minio]

  runner:
    build:
      context: ./services/runner
      dockerfile: ../../docker/Dockerfile.runner
    env_file: .env
    depends_on: [redis]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  mail_ingestor:
    build:
      context: ./services/mail_ingestor
      dockerfile: ../../docker/Dockerfile.sidecar
    env_file: .env
    depends_on: [gateway]
    restart: unless-stopped

  inbox_watcher:
    build:
      context: ./services/inbox_watcher
      dockerfile: ../../docker/Dockerfile.sidecar
    env_file: .env
    restart: unless-stopped
    volumes:
      - ./inbox:/watched:rw

  result_notifier:
    build:
      context: ./services/result_notifier
      dockerfile: ../../docker/Dockerfile.sidecar
    env_file: .env
    depends_on: [gateway, runner]
    restart: unless-stopped

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    ports: ["9000:9000","9001:9001"]
    volumes:
      - miniodata:/data

# ===== NETWORKS =====
networks:
  nox-network:
    driver: bridge
    name: nox-network

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
    name: nox-postgres-data
  redis_data:
    driver: local
    name: nox-redis-data
  prometheus_data:
    driver: local
    name: nox-prometheus-data
  grafana_data:
    driver: local
    name: nox-grafana-data
  dbdata: {}
  miniodata: {}
